From 3ba9b88c0dbbce9b43d1e6f2f85b6a480806164e Mon Sep 17 00:00:00 2001
From: Eric Rommel <ericrommel@gmail.com>
Date: Sat, 25 Aug 2018 20:00:01 +0200
Subject: [PATCH] My submission

---
 Readme.txt                                         |  11 +-
 build.gradle                                       |   2 +
 .../techtrial/controller/PanelController.java      | 107 +++++++++-
 .../techtrial/model/HourlyElectricity.java         |   6 +-
 .../techtrial/repository/PanelRepository.java      |   1 +
 .../crossover/techtrial/service/PanelService.java  |   2 +-
 .../techtrial/service/PanelServiceImpl.java        |   6 +-
 .../techtrial/controller/PanelControllerTest.java  | 234 ++++++++++++++++++++-
 .../techtrial/dto/DailyElectricityTest.java        |  49 +++++
 .../techtrial/model/HourlyElectricityTest.java     |  54 +++++
 .../com/crossover/techtrial/model/PanelTest.java   |  51 +++++
 11 files changed, 502 insertions(+), 21 deletions(-)
 create mode 100644 src/test/java/com/crossover/techtrial/dto/DailyElectricityTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/model/HourlyElectricityTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/model/PanelTest.java

diff --git a/Readme.txt b/Readme.txt
index 91be5e0..681fd3e 100644
--- a/Readme.txt
+++ b/Readme.txt
@@ -6,9 +6,14 @@ Notes:
 	- Frontend application excluded from the current scope. It is a separate, fully-functioning application handled by another team, so we do not want to modify it.
 
 Tasks:
-	1)	Increase unit test coverage to reach 60%, achieving more than 60% will only consume your valuable time without extra score.
-	2)	Find bugs and fix them, hint: we provided Cross-Solar application in a good structure, so no need to spend your valuable time on structure modifications,  just focus on fixing bugs.
-	3) 	Frontend team wants to display panelâ€™s all historical data in a chart, in which each point represents electricity generated by this panel each day [sum, min, max, average] up to the end of previous day , your goal is to implement backend part of this task, API specifications already there in code as agreed with Frontend team, and it is ok to implement this task without any optimization.
+OK->1) Increase unit test coverage to reach 60%, achieving more than 60% will only consume your valuable time without
+	   extra score.
+OK->2) Find bugs and fix them, hint: we provided Cross-Solar application in a good structure, so no need to spend your
+	   valuable time on structure modifications, just focus on fixing bugs.
+OK->3) Frontend team wants to display panel's all historical data in a chart, in which each point represents
+	   electricity generated by this panel each day [sum, min, max, average] up to the end of previous day, your goal
+	   is to implement backend part of this task, API specifications already there in code as agreed with Frontend
+	   team, and it is ok to implement this task without any optimization.
 
 Prerequisites:
 	Any IDE
diff --git a/build.gradle b/build.gradle
index f6cec90..3d31539 100644
--- a/build.gradle
+++ b/build.gradle
@@ -16,6 +16,7 @@ buildscript {
 
 apply plugin: 'java'
 apply plugin: 'eclipse'
+apply plugin: 'idea'
 apply plugin: "jacoco"
 apply plugin: "io.spring.dependency-management"
 apply plugin: 'org.springframework.boot'
@@ -37,6 +38,7 @@ dependencies {
 	compile('org.springframework.boot:spring-boot-starter-web')
 	compile('org.springframework.boot:spring-boot-starter-data-rest')
 	compile('com.fasterxml.jackson.core:jackson-core')
+	compile('org.modelmapper:modelmapper:1.1.0')
 	testCompile('com.h2database:h2')
 	testCompile('org.springframework.boot:spring-boot-starter-aop')
 	compile('org.liquibase:liquibase-core')
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..a4df12a 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -3,10 +3,16 @@ package com.crossover.techtrial.controller;
 import com.crossover.techtrial.dto.DailyElectricity;
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.PanelRepository;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
+
+import java.time.LocalDate;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -32,6 +38,9 @@ public class PanelController {
   
   @Autowired
   HourlyElectricityService hourlyElectricityService;
+
+  @Autowired
+  PanelRepository panelRepository;
   
   /**
    * Register a Panel to System and start receiving the electricity statistics.
@@ -43,29 +52,31 @@ public class PanelController {
     panelService.register(panel);
     return  ResponseEntity.accepted().build();
   }
-  
+
   /**
    * Controller Method to save hourly Electricity to Database. 
    * @param panelSerial Serial number of Panel.
    * @param hourlyElectricity  generated electricity for this panel.
    * @return
    */
-  
   @PostMapping(path = "/api/panels/{panel-serial}/hourly")
   public ResponseEntity<?> saveHourlyElectricity(
-      @PathVariable(value = "panel-serial") String panelSerial, 
-      @RequestBody HourlyElectricity hourlyElectricity) {
+    @PathVariable(value = "panel-serial") String panelSerial,
+    @RequestBody HourlyElectricity hourlyElectricity) {
+    /* BUG FIXED: Panel is storing as null. */
+    Panel panel = panelService.findBySerial(panelSerial);
+    hourlyElectricity.setPanel(panel);
     return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
   }
    
   /**
    * Get Hourly Electricity from Previous dates.
    */
-  
   @GetMapping(path = "/api/panels/{panel-serial}/hourly")
   public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
-      @PageableDefault(size = 5,value = 0) Pageable pageable) {
+    /* BUG FIXED: spelling error */
+    @PathVariable(value = "panel-serial") String panelSerial,
+    @PageableDefault(size = 5,value = 0) Pageable pageable) {
     Panel panel = panelService.findBySerial(panelSerial);
     if (panel == null) {
       return ResponseEntity.notFound().build(); 
@@ -74,22 +85,96 @@ public class PanelController {
         panel.getId(), pageable);
     return ResponseEntity.ok(page);
   }
-  
+
+  /**
+   * Retrieve all registered Panels.
+   * @param
+   * @return registered panels
+   */
+  @GetMapping(path = "/api/panels")
+  public Iterable<Panel> getAllPanels() {
+    return panelService.findAll();
+  }
+
   /**
    * This end point is used by Front end charts component to plot the daily statistics of 
    * electricity generated by this Panel from the day it registered to end of previous day.
    * @param panelSerial is unique serial for this Panel.
    * @return
    */
-  
   @GetMapping(path = "/api/panels/{panel-serial}/daily")
   public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
-      @PathVariable(value = "panel-serial") String panelSerial) {
+    @PathVariable(value = "panel-serial") String panelSerial) {
     List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
     /**
      * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
      * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
      */
-    return ResponseEntity.ok(dailyElectricityForPanel);
+    Panel panel = panelService.findBySerial(panelSerial);
+    if (panel == null) {
+      return ResponseEntity.notFound().build();
+    }
+
+    Iterable<HourlyElectricity> hourlyValues = hourlyElectricityService.getAllHourlyElectricityByPanelId(
+            panel.getId(), null);
+
+    Long min=Long.MAX_VALUE, max=Long.MIN_VALUE, sum = 0L;
+    Double count=0.0, avg=0.0;
+    Map<LocalDate, DailyElectricity> dMap = new HashMap<>();
+    DailyElectricity de = new DailyElectricity();
+
+    for (HourlyElectricity he : hourlyValues) {
+      count++;
+      LocalDate today = LocalDate.now();
+      LocalDate date = he.getReadingAt().toLocalDate();
+      Long generated = he.getGeneratedElectricity();
+
+      /* Checking up to the end of previous day */
+      if (date.isBefore(today)) {
+        if (dMap.isEmpty()) {
+          dMap.put(date, setDaily(de, generated, min, max, sum, avg, count, date));
+        }
+        else {
+          if (dMap.containsKey(date)) {
+            dMap.put(date, setDaily(de, generated, de.getMin(), de.getMax(), de.getSum(), de.getAverage(), count, date));
+          } else {
+            sum = 0L; avg = 0.0; count = 1.0;
+            min = Long.MAX_VALUE; max = Long.MIN_VALUE;
+            de = new DailyElectricity();
+            dMap.put(date, setDaily(de, generated, min, max, sum, avg, count, date));
+          }
+        }
+      } else {
+        count = 0.0;
+      }
+    }
+
+    if (dMap.isEmpty()) {
+      return ResponseEntity.noContent().build();
+    } else {
+      for (Map.Entry<LocalDate, DailyElectricity> pair : dMap.entrySet()) {
+        dailyElectricityForPanel.add(pair.getValue());
+      }
+      return ResponseEntity.ok(dailyElectricityForPanel);
+    }
+  }
+
+  private DailyElectricity setDaily(DailyElectricity d, Long generated, Long min, Long max, Long sum,
+                                    Double avg, Double count, LocalDate date) {
+    //DailyElectricity daily = new DailyElectricity();
+    if (generated < min) {
+      min = generated;
+    }
+    if (generated > max) {
+      max = generated;
+    }
+    sum += generated;
+    avg = sum / count;
+    d.setDate(date);
+    d.setMax(max);
+    d.setMin(min);
+    d.setSum(sum);
+    d.setAverage(avg);
+    return d;
   }
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
index 275f765..c3525ef 100644
--- a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
@@ -1,5 +1,6 @@
 package com.crossover.techtrial.model;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import java.io.Serializable;
 import java.time.LocalDateTime;
@@ -31,6 +32,8 @@ public class HourlyElectricity implements Serializable {
   Long id;
   
   @JsonIgnore
+  /* BUG FIXED: JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String */
+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
   @ManyToOne
   @JoinColumn(name = "panel_id", referencedColumnName = "id")
   Panel panel;
@@ -125,7 +128,4 @@ public class HourlyElectricity implements Serializable {
     return "HourlyElectricity [id=" + id + ", panel=" + panel + ", generatedElectricity="
         + generatedElectricity + ", readingAt=" + readingAt + "]";
   }
-  
-  
-  
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
index dcba8f3..6850463 100644
--- a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
@@ -11,5 +11,6 @@ import org.springframework.data.rest.core.annotation.RestResource;
 
 @RestResource(exported = false)
 public interface PanelRepository extends PagingAndSortingRepository<Panel, Long> {
+  Iterable<Panel> findAll();
   Panel findBySerial(String serial);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/PanelService.java b/src/main/java/com/crossover/techtrial/service/PanelService.java
index b1ba940..9db860a 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelService.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelService.java
@@ -15,6 +15,6 @@ public interface PanelService {
    */
   
   void register(Panel panel);
-  
+  Iterable<Panel> findAll();
   Panel findBySerial(String serial);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
index 48649de..3a587e6 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
@@ -25,7 +25,11 @@ public class PanelServiceImpl implements PanelService {
   public void register(Panel panel) { 
     panelRepository.save(panel);
   }
-  
+
+  public Iterable<Panel> findAll() {
+      return panelRepository.findAll();
+  }
+
   public Panel findBySerial(String serial) {
     return panelRepository.findBySerial(serial);
   }
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..cafadb4 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,6 +1,9 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.PanelRepository;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -10,14 +13,28 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.web.PageableDefault;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.test.web.servlet.MockMvc;
-
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.web.bind.annotation.PathVariable;
+
+import java.time.LocalDate;
+import java.util.*;
+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
+import static org.hamcrest.core.Is.is;
+import static org.mockito.BDDMockito.given;
+import static org.springframework.http.MediaType.APPLICATION_JSON;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 
 /**
@@ -38,6 +55,12 @@ public class PanelControllerTest {
   @Autowired
   private TestRestTemplate template;
 
+  @Autowired
+  private PanelRepository panelRepository;
+
+  @LocalServerPort
+  private int port;
+
   @Before
   public void setup() throws Exception {
     mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
@@ -46,16 +69,223 @@ public class PanelControllerTest {
   @Test
   public void testPanelShouldBeRegistered() throws Exception {
     HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
+        "{\"serial\": " + generateSerialNumber() + ", \"longitude\": \"54.123232\","
             + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
     ResponseEntity<Panel> response = template.postForEntity(
         "/api/register", panel, Panel.class);
     Assert.assertEquals(202,response.getStatusCode().value());
   }
 
+  // TODO:  Check javax.persistence.NonUniqueResultException: query did not return a unique result. Maybe this is a Frontend concern.
+  @Test
+  public void testSaveHourlyElectricity() throws Exception {
+
+      // Adding a panel
+      String serialNumber = generateSerialNumber();
+
+      HttpEntity<Object> panel = getHttpEntity(
+              "{\"serial\": \"" + serialNumber + "\", \"longitude\": \"47.498012\","
+                      + " \"latitude\": \"19.039912\",\"brand\":\"tesla\" }");
+      ResponseEntity<Panel> responsePanel = template.postForEntity(
+              "/api/register", panel, Panel.class);
+
+      Assert.assertEquals(202,responsePanel.getStatusCode().value());
+
+      // Get the panel added before
+      Panel p = panelRepository.findBySerial(serialNumber);
+
+      // Save hourly by a whole day and assert it
+      Random random = new Random();
+      for (int i=0; i < 24; i++) {
+          HttpEntity<Object> hourlyElectricity = getHttpEntity(
+                  "{\"panelId\": \"" + p.getId() + "\", \"generatedElectricity\": \"" +
+                          random.nextInt(1001)+ "\", \"readingAt\": \"2018-08-15T"
+                          + String.format("%02d", i) + ":00:00\"}");
+
+          ResponseEntity<HourlyElectricity> responseHourly = template.postForEntity(
+                  "/api/panels/" + serialNumber + "/hourly", hourlyElectricity, HourlyElectricity.class);
+          Assert.assertEquals(200,responseHourly.getStatusCode().value());
+      }
+  }
+
+  @Test
+  public void testHourlyElectricity() {
+      // Getting a null panel (not existent)
+      ResponseEntity<Object[]> res404 = template.getForEntity(
+              "/api/panels/" + "NULL123456789123" + "/hourly", Object[].class
+      );
+
+      Assert.assertEquals(404,res404.getStatusCode().value());
+
+      // Create a panel
+      String serialNumber = generateSerialNumber();
+      HttpEntity<Object> panel = getHttpEntity(
+              "{\"serial\": \"" + serialNumber + "\", \"longitude\": \"64.217012\","
+                      + " \"latitude\": \"11.229812\",\"brand\":\"tesla\" }");
+      ResponseEntity<Panel> responsePanel = template.postForEntity(
+              "/api/register", panel, Panel.class);
+
+      Assert.assertEquals(202,responsePanel.getStatusCode().value());
+
+      // Save hourly (3 hour points) for 2 days
+      String panelId = panelRepository.findBySerial(serialNumber).getId().toString();
+      for (int i=10; i < 12; i++) {
+          for (int j=7; j<10; j++) {
+              HttpEntity<Object> hourlyElectricity = getHttpEntity(
+                      "{\"panelId\": \"" + panelId + "\", \"generatedElectricity\": \"" + (i + j) + "\"," +
+                              " \"readingAt\": \"2018-08-" + i + "T"
+                              + String.format("%02d", j) + ":00:00\"}");
+
+              ResponseEntity<HourlyElectricity> responseHourly = template.postForEntity(
+                      "/api/panels/" + serialNumber + "/hourly", hourlyElectricity, HourlyElectricity.class);
+              Assert.assertEquals(200,responseHourly.getStatusCode().value());
+          }
+      }
+
+      // Getting the panel's id by serial number
+      ResponseEntity<Object> response = template.getForEntity(
+              "/api/panels/" + serialNumber + "/hourly", Object.class
+      );
+
+      Assert.assertEquals(200,response.getStatusCode().value());
+
+  }
+
+  @Test
+  public void testGetAllPanel() throws Exception {
+      List<Panel> allPanels = new ArrayList<>();
+
+      Panel panel1 = new Panel();
+      panel1.setSerial(generateSerialNumber());
+      panel1.setLatitude(47.498010);
+      panel1.setLongitude(19.039910);
+      panel1.setBrand("Tesla");
+
+      allPanels.add(panel1);
+
+      Panel panel2 = new Panel();
+      panel2.setSerial(generateSerialNumber());
+      panel2.setLatitude(-23.533773);
+      panel2.setLongitude(-46.625290);
+      panel2.setBrand("Tesla");
+      allPanels.add(panel2);
+
+      given(panelController.getAllPanels()).willReturn(allPanels);
+
+      mockMvc.perform(get("/api/panels")
+              .contentType(APPLICATION_JSON))
+              .andExpect(status().isOk())
+              .andExpect(jsonPath("$", hasSize(2)))
+              .andExpect(jsonPath("$[0].serial", is(panel1.getSerial())))
+              .andExpect(jsonPath("$[1].serial", is(panel2.getSerial())));
+  }
+
+  @Test
+  public void testAllDailyElectricityFromYesterday() {
+      /* Getting a null panel (not existent) */
+      ResponseEntity<Object[]> res404 = template.getForEntity(
+              "/api/panels/" + "NULL123456789123" + "/daily", Object[].class
+      );
+      Assert.assertEquals(404,res404.getStatusCode().value());
+
+      /* Create a panel */
+      String serialNumber = generateSerialNumber();
+      HttpEntity<Object> panel = getHttpEntity(
+              "{\"serial\": \"" + serialNumber + "\", \"longitude\": \"64.217012\","
+                      + " \"latitude\": \"11.229812\",\"brand\":\"tesla\" }");
+      ResponseEntity<Panel> responsePanel = template.postForEntity(
+              "/api/register", panel, Panel.class);
+      Assert.assertEquals(202,responsePanel.getStatusCode().value());
+
+      String panelId = panelRepository.findBySerial(serialNumber).getId().toString();
+
+      /* Save hourly (3 hour points) for TODAY */
+      for (int i=7; i<10; i++) {
+          HttpEntity<Object> hourlyElectricity = getHttpEntity(
+                  "{\"panelId\": \"" + panelId + "\", \"generatedElectricity\": \"" + 2 * (i + i) + "\"," +
+                          " \"readingAt\": \"" + LocalDate.now() + "T"
+                          + String.format("%02d", i) + ":00:00\"}");
+
+          ResponseEntity<HourlyElectricity> responseHourly = template.postForEntity(
+                  "/api/panels/" + serialNumber + "/hourly", hourlyElectricity, HourlyElectricity.class);
+          Assert.assertEquals(200, responseHourly.getStatusCode().value());
+      }
+
+      /* Getting the panel's id by serial number */
+      ResponseEntity<Object[]> responseWithNoResults = template.getForEntity(
+              "/api/panels/" + serialNumber + "/daily", Object[].class
+      );
+      System.out.println("RESULT CODE: " + responseWithNoResults.getStatusCodeValue());
+      Assert.assertEquals(204,responseWithNoResults.getStatusCode().value());
+
+      /* Save hourly (3 hour points) for 2 days */
+      for (int i=10; i < 12; i++) {
+          for (int j=7; j<10; j++) {
+              HttpEntity<Object> hourlyElectricity = getHttpEntity(
+                      "{\"panelId\": \"" + panelId + "\", \"generatedElectricity\": \"" + 2*(i + j) + "\"," +
+                              " \"readingAt\": \"2018-08-" + i + "T"
+                              + String.format("%02d", j) + ":00:00\"}");
+
+              ResponseEntity<HourlyElectricity> responseHourly = template.postForEntity(
+                      "/api/panels/" + serialNumber + "/hourly", hourlyElectricity, HourlyElectricity.class);
+              Assert.assertEquals(200,responseHourly.getStatusCode().value());
+              /*
+               * Generated Data (DailyElectricity):
+               * [date=2018-08-10, time01=07:00:00 (gen=34), time02=08:00:00 (gen=36), time03=09:00:00 (gen=38)]
+               * [date=2018-08-11, time01=07:00:00 (gen=36), time02=08:00:00 (gen=38), time03=09:00:00 (gen=40)]
+               * */
+          }
+      }
+
+      /*
+       * Daily Results to check:
+       * DailyElectricity [date=2018-08-10, sum=108, average=36.0, min=34, max=38]
+       * DailyElectricity [date=2018-08-11, sum=114, average=38.0, min=36, max=40]
+       * */
+      /* Getting the panel's daily by serial number */
+      ResponseEntity<Object[]> resDaily = template.getForEntity(
+              "/api/panels/" + serialNumber + "/daily", Object[].class
+      );
+
+      Assert.assertEquals(200,resDaily.getStatusCode().value());
+
+      /* Check results on response body and assert it */
+      ObjectMapper oMapper = new ObjectMapper();
+      @SuppressWarnings (value="unchecked")
+      List<Map<?, ?>> objBodies = oMapper.convertValue(resDaily.getBody(), List.class);
+      for (Map<?, ?> obj : objBodies) {
+          // {date=2018-08-11, sum=114, average=38.0, min=36, max=40}
+          if (obj.get("date").equals("2018-08-11")) {
+              Assert.assertEquals(114, obj.get("sum"));
+              Assert.assertEquals(38.0, obj.get("average"));
+              Assert.assertEquals(36, obj.get("min"));
+              Assert.assertEquals(40, obj.get("max"));
+          }
+          // {date=2018-08-10, sum=108, average=36.0, min=34, max=38}
+          if (obj.get("date").equals("2018-08-10")) {
+              Assert.assertEquals(108, obj.get("sum"));
+              Assert.assertEquals(36.0, obj.get("average"));
+              Assert.assertEquals(34, obj.get("min"));
+              Assert.assertEquals(38, obj.get("max"));
+          }
+      }
+  }
+
   private HttpEntity<Object> getHttpEntity(Object body) {
     HttpHeaders headers = new HttpHeaders();
     headers.setContentType(MediaType.APPLICATION_JSON);
     return new HttpEntity<Object>(body, headers);
   }
+
+  private String generateSerialNumber() {
+      StringBuilder stringBuilder = new StringBuilder();
+      Random random = new Random();
+      String subset = "0123456789";
+      for (int i = 0; i < 16; i++) {
+          int index = random.nextInt(subset.length());
+          char c = subset.charAt(index);
+          stringBuilder.append( c );
+      }
+      return stringBuilder.toString();
+  }
 }
diff --git a/src/test/java/com/crossover/techtrial/dto/DailyElectricityTest.java b/src/test/java/com/crossover/techtrial/dto/DailyElectricityTest.java
new file mode 100644
index 0000000..6cacb56
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/dto/DailyElectricityTest.java
@@ -0,0 +1,49 @@
+package com.crossover.techtrial.dto;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.modelmapper.ModelMapper;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+import java.time.LocalDate;
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class DailyElectricityTest {
+    private static final ModelMapper modelMapper = new ModelMapper();
+    DailyElectricity de = new DailyElectricity();
+
+    @Before
+    public void setUp() throws Exception {
+        de.setDate(LocalDate.now());
+        de.setMin(10L);
+        de.setMax(90L);
+        de.setSum(320L);
+        de.setAverage(33.25);
+    }
+
+    @Test
+    public void testDailyElectricity() {
+
+        DailyElectricity daily = modelMapper.map(de, DailyElectricity.class);
+
+        Assert.assertEquals(de.getDate(), daily.getDate());
+        Assert.assertEquals(de.getMin(), daily.getMin());
+        Assert.assertEquals(de.getMax(), daily.getMax());
+        Assert.assertEquals(de.getSum(), daily.getSum());
+        Assert.assertEquals(de.getAverage(), daily.getAverage());
+    }
+
+    @Test
+    public void testToString() {
+
+        Assert.assertEquals(
+                de.toString(),
+                "DailyElectricity [date=" + de.getDate() + ", sum=" + 320 + ", average="
+                        + 33.25 + ", min=" + 10 + ", max=" + 90 + "]"
+        );
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/model/HourlyElectricityTest.java b/src/test/java/com/crossover/techtrial/model/HourlyElectricityTest.java
new file mode 100644
index 0000000..79c7a25
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/model/HourlyElectricityTest.java
@@ -0,0 +1,54 @@
+package com.crossover.techtrial.model;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+import java.time.LocalDateTime;
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class HourlyElectricityTest {
+    HourlyElectricity he1 = new HourlyElectricity();
+    HourlyElectricity he2 = new HourlyElectricity();
+    Panel p = new Panel();
+
+    @Before
+    public void setUp() throws Exception {
+        p.setId(1L);
+        p.setSerial("1231231231231231");
+        he1.setId(1L);
+        he1.setPanel(p);
+        he1.setReadingAt(LocalDateTime.parse("2018-08-15T09:00:00"));
+        he1.setGeneratedElectricity(150L);
+        he2.setId(1L);
+        he2.setPanel(p);
+        he2.setReadingAt(LocalDateTime.parse("2018-08-15T09:00:00"));
+        he2.setGeneratedElectricity(150L);
+    }
+
+    @Test
+    public void testToString() {
+
+        Assert.assertEquals(
+                he1.toString(),
+                "HourlyElectricity [id=" + he1.getId() + ", panel=" + p.toString() + ", generatedElectricity="
+                        + he1.getGeneratedElectricity() + ", readingAt=" + he1.getReadingAt() + "]"
+        );
+    }
+
+    @Test
+    public void testHashCode() {
+
+        Assert.assertTrue(he1.hashCode() == he2.hashCode());
+    }
+
+    @Test
+    public void testEquals() {
+
+        Assert.assertTrue(he1.equals(he2) && he2.equals(he1));
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/model/PanelTest.java b/src/test/java/com/crossover/techtrial/model/PanelTest.java
new file mode 100644
index 0000000..6944464
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/model/PanelTest.java
@@ -0,0 +1,51 @@
+package com.crossover.techtrial.model;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class PanelTest {
+    Panel p1 = new Panel();
+    Panel p2 = new Panel();
+
+    @Before
+    public void setUp() throws Exception {
+        p1.setId(1L);
+        p1.setSerial("1231231231231231");
+        p1.setLatitude(47.498012);
+        p1.setLongitude(19.039912);
+        p1.setBrand("Tesla");
+        p2.setId(1L);
+        p2.setSerial("1231231231231231");
+        p2.setLatitude(47.498012);
+        p2.setLongitude(19.039912);
+        p2.setBrand("Tesla");
+    }
+
+    @Test
+    public void testToString() {
+
+        Assert.assertEquals(
+                p1.toString(),
+                "Panel [id=" + p1.getId() + ", serial=" + p1.getSerial() + ", longitude=" + p1.getLongitude()
+                        + ", latitude=" + p1.getLatitude() + ", brand=" + p1.getBrand() + "]"
+        );
+    }
+
+    @Test
+    public void testHashCode() {
+
+        Assert.assertTrue(p1.hashCode() == p2.hashCode());
+    }
+
+    @Test
+    public void testEquals() {
+
+        Assert.assertTrue(p1.equals(p2) && p2.equals(p1));
+    }
+}
\ No newline at end of file
-- 
2.14.1.windows.1

