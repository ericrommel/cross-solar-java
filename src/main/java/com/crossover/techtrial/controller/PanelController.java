package com.crossover.techtrial.controller;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.model.Panel;
import com.crossover.techtrial.repository.PanelRepository;
import com.crossover.techtrial.service.HourlyElectricityService;
import com.crossover.techtrial.service.PanelService;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * Panel Controller for all Rest APIs related to Panel.
 * @author Crossover
 *
 */

@RestController
public class PanelController {

  @Autowired
  PanelService panelService;
  
  @Autowired
  HourlyElectricityService hourlyElectricityService;

  @Autowired
  PanelRepository panelRepository;
  
  /**
   * Register a Panel to System and start receiving the electricity statistics.
   * @param panel to register.
   * @return
   */
  @PostMapping(path = "/api/register")
  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
    panelService.register(panel);
    return  ResponseEntity.accepted().build();
  }

  /**
   * Controller Method to save hourly Electricity to Database. 
   * @param panelSerial Serial number of Panel.
   * @param hourlyElectricity  generated electricity for this panel.
   * @return
   */
  @PostMapping(path = "/api/panels/{panel-serial}/hourly")
  public ResponseEntity<?> saveHourlyElectricity(
    @PathVariable(value = "panel-serial") String panelSerial,
    @RequestBody HourlyElectricity hourlyElectricity) {
    /* BUG FIXED: Panel is storing as null. */
    Panel panel = panelService.findBySerial(panelSerial);
    hourlyElectricity.setPanel(panel);
    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
  }
   
  /**
   * Get Hourly Electricity from Previous dates.
   */
  @GetMapping(path = "/api/panels/{panel-serial}/hourly")
  public ResponseEntity<?> hourlyElectricity(
    /* BUG FIXED: spelling error */
    @PathVariable(value = "panel-serial") String panelSerial,
    @PageableDefault(size = 5,value = 0) Pageable pageable) {
    Panel panel = panelService.findBySerial(panelSerial);
    if (panel == null) {
      return ResponseEntity.notFound().build(); 
    }
    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
        panel.getId(), pageable);
    return ResponseEntity.ok(page);
  }

  /**
   * Retrieve all registered Panels.
   * @param
   * @return registered panels
   */
  @GetMapping(path = "/api/panels")
  public Iterable<Panel> getAllPanels() {
    return panelService.findAll();
  }

  /**
   * This end point is used by Front end charts component to plot the daily statistics of 
   * electricity generated by this Panel from the day it registered to end of previous day.
   * @param panelSerial is unique serial for this Panel.
   * @return
   */
  @GetMapping(path = "/api/panels/{panel-serial}/daily")
  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
    @PathVariable(value = "panel-serial") String panelSerial) {
    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
    /**
     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
     */
    Panel panel = panelService.findBySerial(panelSerial);
    if (panel == null) {
      return ResponseEntity.notFound().build();
    }

    Iterable<HourlyElectricity> hourlyValues = hourlyElectricityService.getAllHourlyElectricityByPanelId(
            panel.getId(), null);

    Long min=Long.MAX_VALUE, max=Long.MIN_VALUE, sum = 0L;
    Double count=0.0, avg=0.0;
    Map<LocalDate, DailyElectricity> dMap = new HashMap<>();
    DailyElectricity de = new DailyElectricity();

    for (HourlyElectricity he : hourlyValues) {
      count++;
      LocalDate today = LocalDate.now();
      LocalDate date = he.getReadingAt().toLocalDate();
      Long generated = he.getGeneratedElectricity();

      /* Checking up to the end of previous day */
      if (date.isBefore(today)) {
        if (dMap.isEmpty()) {
          dMap.put(date, setDaily(de, generated, min, max, sum, avg, count, date));
        }
        else {
          if (dMap.containsKey(date)) {
            dMap.put(date, setDaily(de, generated, de.getMin(), de.getMax(), de.getSum(), de.getAverage(), count, date));
          } else {
            sum = 0L; avg = 0.0; count = 1.0;
            min = Long.MAX_VALUE; max = Long.MIN_VALUE;
            de = new DailyElectricity();
            dMap.put(date, setDaily(de, generated, min, max, sum, avg, count, date));
          }
        }
      } else {
        count = 0.0;
      }
    }

    if (dMap.isEmpty()) {
      return ResponseEntity.noContent().build();
    } else {
      for (Map.Entry<LocalDate, DailyElectricity> pair : dMap.entrySet()) {
        dailyElectricityForPanel.add(pair.getValue());
      }
      return ResponseEntity.ok(dailyElectricityForPanel);
    }
  }

  private DailyElectricity setDaily(DailyElectricity d, Long generated, Long min, Long max, Long sum,
                                    Double avg, Double count, LocalDate date) {
    //DailyElectricity daily = new DailyElectricity();
    if (generated < min) {
      min = generated;
    }
    if (generated > max) {
      max = generated;
    }
    sum += generated;
    avg = sum / count;
    d.setDate(date);
    d.setMax(max);
    d.setMin(min);
    d.setSum(sum);
    d.setAverage(avg);
    return d;
  }
}